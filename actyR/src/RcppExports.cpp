// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/actyR.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// valuefunction
List valuefunction(Rcpp::List Settings, Rcpp::List Param);
RcppExport SEXP actyR_valuefunction(SEXP SettingsSEXP, SEXP ParamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Settings(SettingsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Param(ParamSEXP);
    rcpp_result_gen = Rcpp::wrap(valuefunction(Settings, Param));
    return rcpp_result_gen;
END_RCPP
}
// computeMixingDensity
cube computeMixingDensity(Rcpp::List Settings, Rcpp::List Param, mat vS);
RcppExport SEXP actyR_computeMixingDensity(SEXP SettingsSEXP, SEXP ParamSEXP, SEXP vSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Settings(SettingsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Param(ParamSEXP);
    Rcpp::traits::input_parameter< mat >::type vS(vSSEXP);
    rcpp_result_gen = Rcpp::wrap(computeMixingDensity(Settings, Param, vS));
    return rcpp_result_gen;
END_RCPP
}
// likelihood
colvec likelihood(Rcpp::List Settings, Rcpp::List Param, Rcpp::List Data);
RcppExport SEXP actyR_likelihood(SEXP SettingsSEXP, SEXP ParamSEXP, SEXP DataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Settings(SettingsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Param(ParamSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Data(DataSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihood(Settings, Param, Data));
    return rcpp_result_gen;
END_RCPP
}
// getModelTransitionMatrix
mat getModelTransitionMatrix(Rcpp::List Settings, Rcpp::List Param);
RcppExport SEXP actyR_getModelTransitionMatrix(SEXP SettingsSEXP, SEXP ParamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Settings(SettingsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Param(ParamSEXP);
    rcpp_result_gen = Rcpp::wrap(getModelTransitionMatrix(Settings, Param));
    return rcpp_result_gen;
END_RCPP
}
// mixingDensityGradient
cube mixingDensityGradient(Rcpp::List Settings, Rcpp::List Param, Rcpp::List Eq, mat D_vS, bool OMEGA_FLAG);
RcppExport SEXP actyR_mixingDensityGradient(SEXP SettingsSEXP, SEXP ParamSEXP, SEXP EqSEXP, SEXP D_vSSEXP, SEXP OMEGA_FLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Settings(SettingsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Param(ParamSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Eq(EqSEXP);
    Rcpp::traits::input_parameter< mat >::type D_vS(D_vSSEXP);
    Rcpp::traits::input_parameter< bool >::type OMEGA_FLAG(OMEGA_FLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(mixingDensityGradient(Settings, Param, Eq, D_vS, OMEGA_FLAG));
    return rcpp_result_gen;
END_RCPP
}
// likelihoodGradient
List likelihoodGradient(Rcpp::List Settings, Rcpp::List Param, Rcpp::List Data);
RcppExport SEXP actyR_likelihoodGradient(SEXP SettingsSEXP, SEXP ParamSEXP, SEXP DataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type Settings(SettingsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Param(ParamSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Data(DataSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihoodGradient(Settings, Param, Data));
    return rcpp_result_gen;
END_RCPP
}
// dPidMu
mat dPidMu(mat Pi, rowvec logGrid, double mu, double sigma);
RcppExport SEXP actyR_dPidMu(SEXP PiSEXP, SEXP logGridSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< rowvec >::type logGrid(logGridSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dPidMu(Pi, logGrid, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// dPidSigma
mat dPidSigma(mat Pi, rowvec logGrid, double mu, double sigma);
RcppExport SEXP actyR_dPidSigma(SEXP PiSEXP, SEXP logGridSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< rowvec >::type logGrid(logGridSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(dPidSigma(Pi, logGrid, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"actyR_valuefunction", (DL_FUNC) &actyR_valuefunction, 2},
    {"actyR_computeMixingDensity", (DL_FUNC) &actyR_computeMixingDensity, 3},
    {"actyR_likelihood", (DL_FUNC) &actyR_likelihood, 3},
    {"actyR_getModelTransitionMatrix", (DL_FUNC) &actyR_getModelTransitionMatrix, 2},
    {"actyR_mixingDensityGradient", (DL_FUNC) &actyR_mixingDensityGradient, 5},
    {"actyR_likelihoodGradient", (DL_FUNC) &actyR_likelihoodGradient, 3},
    {"actyR_dPidMu", (DL_FUNC) &actyR_dPidMu, 4},
    {"actyR_dPidSigma", (DL_FUNC) &actyR_dPidSigma, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_actyR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
